package com.news.service.impl;

import com.news.entity.*;
import com.news.exception.NewsAPIException;
import com.news.exception.ResourceNotFoundException;
import com.news.payload.CommentDTO;
import com.news.repository.ArticleRepository;
import com.news.repository.CommentRepository;
import com.news.repository.UserRepository;
import com.news.service.CommentService;
import lombok.RequiredArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
public class CommentServiceImpl implements CommentService {


    private final CommentRepository commentRepository;
    private final ArticleRepository articleRepository;
    private final UserRepository userRepository;
    private final ModelMapper modelMapper;

    @Override
    public CommentDTO createComment(long articleId, CommentDTO request, @AuthenticationPrincipal UserDetails userDetails) {

        Article commentArticle =  articleRepository.findById(articleId).orElseThrow(() -> new ResourceNotFoundException("Post", "id", articleId));
        if(commentArticle.getStatus() != ArticleStatus.PUBLISHED) {
            throw new NewsAPIException(HttpStatus.BAD_REQUEST, "This article is not in PUBLISHED yet!");
        }
        Comment comment = modelMapper.map(request, Comment.class);

        if(userDetails != null){
            comment.setUser(userRepository.findByUsername(userDetails.getUsername()));
        }else {
            comment.setUser(null);
        }
        //comment.setText(request.getText());
        //comment.setAuthorName(request.getAuthorName());
        comment.setStatus(CommentStatus.CREATED);
        comment.setArticle(commentArticle);

        CommentDTO commentDTO = modelMapper.map(comment, CommentDTO.class);
        commentDTO.setCreatedDate(LocalDate.from(LocalDateTime.now()));
        //The creationDate for the Comment Entity should be autogenerated, so we don't set it
        commentRepository.save(comment);

        //return commentDTO;
        return ResponseEntity.ok(commentDTO).getBody();
    }

    @Override
    public CommentDTO updateComment(long commentId, CommentDTO commentRequest) {

        // retrieve comment by id
        Comment comment = commentRepository.findById(commentId).orElseThrow(() ->
                new ResourceNotFoundException("Comment", "id", commentId));

        Article article = articleRepository.findById(comment.getArticle().getArticleId())
                .orElseThrow(() -> new ResourceNotFoundException("Article", "id", comment.getArticle().getArticleId()));



        if(article.getStatus() != ArticleStatus.PUBLISHED){
            throw new NewsAPIException(HttpStatus.BAD_REQUEST, "Article is not PUBLISHED anymore!");
        }

        //We don't keep information for the EDITOR/ADMIN changed the comment content
        comment.setText(commentRequest.getText());
        String username = comment.getUser().getUsername();
        Comment updatedComment = commentRepository.save(comment);
        CommentDTO resultComment = modelMapper.map(updatedComment, CommentDTO.class);
        resultComment.setAuthor(username);
        //return resultComment;
        return ResponseEntity.ok(resultComment).getBody();
    }

    @Override
    public CommentDTO approveComment(long commentId) {
        // retrieve comment by id
        Comment comment = commentRepository.findById(commentId).orElseThrow(() ->
                new ResourceNotFoundException("Comment", "id", commentId));

        Article article = articleRepository.findById(comment.getArticle().getArticleId())
                .orElseThrow(() -> new ResourceNotFoundException("Article", "id", comment.getArticle().getArticleId()));
        if(article.getStatus() != ArticleStatus.PUBLISHED){
            throw new NewsAPIException(HttpStatus.BAD_REQUEST, "Article is not PUBLISHED anymore!");
        }
        comment.setStatus(CommentStatus.APPROVED);
        CommentDTO commentDTO = modelMapper.map(comment, CommentDTO.class);
        commentDTO.setAuthor(comment.getUser().getUsername());
        return commentDTO;
    }

    @Override
    public CommentDTO rejectComment(long commentId) {
        Comment comment = commentRepository.findById(commentId).orElseThrow(() ->
                new ResourceNotFoundException("Comment", "id", commentId));
        Article article = articleRepository.findById(comment.getArticle().getArticleId())
                .orElseThrow(() -> new ResourceNotFoundException("Article", "id", comment.getArticle().getArticleId()));

        if(article.getStatus() != ArticleStatus.PUBLISHED){
            throw new NewsAPIException(HttpStatus.BAD_REQUEST, "Article is not PUBLISHED anymore!");
        }
        comment.setStatus(CommentStatus.CREATED);
        CommentDTO commentDTO = modelMapper.map(comment, CommentDTO.class);
        commentDTO.setAuthor(comment.getUser().getUsername());
        return commentDTO;
    }

    private CommentDTO mapToDTO(Comment comment){
        CommentDTO commentDto = modelMapper.map(comment, CommentDTO.class);
        return  commentDto;
    }

    private Comment mapToEntity(CommentDTO commentDTO){
        Comment comment = modelMapper.map(commentDTO, Comment.class);
        return  comment;
    }

    @Override
    public List<Comment> getCommentsByArticleId(Long articleId) {
        return commentRepository.findByArticleArticleId(articleId);
    }

    @Override
    public Comment getCommentById(Long commentId) {
        return commentRepository.findByCommentId(commentId);
    }
}
